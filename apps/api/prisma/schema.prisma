// Prisma schema for E-Learning Platform
// Generated from BACKEND.md spec

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  password String
  name     String
  role     Role
  phone    String?
  address  String?
  image    String?
  about    String?
  classes  Class[]  @relation("TeacherClasses")
  enrollments ClassEnrollment[]
  progress Progress[]
  submissions AssessmentSubmission[]
  notifications Notification[]
}

enum Role {
  teacher
  student
}

model Class {
  id        String   @id @default(cuid())
  title     String
  subject   String
  teacher   User     @relation("TeacherClasses", fields: [teacherId], references: [id])
  teacherId String
  enrollments ClassEnrollment[]
  lessons    Lesson[]
  thumbnail  String? // S3 image URL
}

model ClassEnrollment {
  id        String   @id @default(cuid())
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
}

model Video {
  id        String   @id @default(cuid())
  title     String
  s3Url     String
  hlsPath   String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
  progress  Progress[]
}

model Progress {
  id        String   @id @default(cuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  percentage Float
}

model Assessment {
  id          String   @id @default(cuid())
  title       String
  pdfUrl      String
  deadline    DateTime
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    String
  submissions AssessmentSubmission[]
}

model AssessmentSubmission {
  id           String   @id @default(cuid())
  student      User     @relation(fields: [studentId], references: [id])
  studentId    String
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  assessmentId String
  pdfUrl       String
  grade        Float?
  feedback     String?
  createdAt    DateTime  @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  payload   Json
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Lesson {
  id          String      @id @default(cuid())
  name        String
  description String
  pdfUrl      String
  class       Class       @relation(fields: [classId], references: [id])
  classId     String
  videos      Video[]
  assessments Assessment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
